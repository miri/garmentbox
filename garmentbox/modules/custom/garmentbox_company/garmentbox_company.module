<?php
/**
 * @file
 * Code for the Garmentbox Company feature.
 */

include_once 'garmentbox_company.features.inc';

/**
 * Implements hook_field_attach_create_bundle().
 */
function garmentbox_company_field_attach_create_bundle($entity_type, $bundle) {
  if (!in_array($entity_type, array('node', 'field_collection_item'))) {
    return;
  }

  $excluded_bundles = array(
    'node' => array('bubble' => TRUE),
    'field_collection_item' => array(),
  );

  if (!empty($excluded_bundles[$entity_type][$bundle])) {
    return;
  }

  if ($entity_type == 'node' && $bundle == 'company') {
    // Group.
    og_create_field(OG_GROUP_FIELD, 'node', 'company');

    // Set the group as private
    $og_field = og_fields_info(OG_ACCESS_FIELD);
    $og_field['instance']['default_value'] = array(1 => array('value' => 1));
    og_create_field(OG_ACCESS_FIELD, 'node', 'company', $og_field);
  }
  else {
    // Group content.
    og_create_field('og_company', $entity_type, $bundle);
  }
}

/**
 * Implements hook_og_fields_info_alter()
 *
 * Add "og-company" field to OG's realted fields.
 */
function garmentbox_company_og_fields_info_alter(&$info) {
  $og_field = $info[OG_AUDIENCE_FIELD];
  $og_field['field']['settings']['handler_settings']['target_bundles'] = array('company');
  $og_field['field']['cardinality'] = 1;
  $og_field['instance']['label'] = 'Company';
  $og_field['instance']['display']['default']['type'] = 'hidden';

  // Enable Entity-reference prepopulate.
  $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
    'status' => TRUE,
    'action' => 'hide',
    'action_on_edit' => TRUE,
    'fallback' => 'redirect',
    'og_context' => TRUE,
  );

  $info['og_company'] = $og_field;
}


/**
 * Implements hook_form_alter().
 */
function garmentbox_company_form_alter(&$form, $form_state) {
  if (empty($form['#node_edit_form']) || !og_is_group_type('node', $form['#node']->type)) {
    return;
  }
  $form['#after_build'][] = 'garmentbox_company_form_after_build';
}

/**
 * After build; Hide PURL from group node's form.
 *
 * @see og_purl_form_alter().
 */
function garmentbox_company_form_after_build($form, &$form_state) {
  unset($form['purl']);
  return $form;
}

/**
 * Implements hook_node_insert().
 *
 * Attach every group-content to company.
 */
function garmentbox_company_node_insert($node) {
  if (og_is_group_type('node', $node->type)) {
    // Set PURL also for the department, as we may want to have a
    // company/department/foo URL structure.
    _garmentbox_company_set_purl($node);

    if ($node->type == 'company') {
      _garmentbox_company_og_vocab_size($node);
    }
    return;
  }
  elseif (!og_is_group_content_type('node', $node->type)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  // Assocaite with company if not already attached.
  if ($wrapper->og_company__og_membership->value()) {
    return;
  }

  // User didn't set the company.
  $gids = og_get_entity_groups();
  $nid = FALSE;
  if (!empty($gids['node'])) {
    // Get the first company group the user belongs to.
    foreach (node_load_multiple($gids['node']) as $group) {
      if ($group->type == 'company') {
        $nid = $group->nid;
        break;
      }
    }
  }

  if (!$nid) {
    throw new Exception('User does not belong to any company group, thus node cannot be attached to "Company".');
  }

  og_group('node', $nid, array('entity_type' => 'node', 'entity' => $node->nid));
}

/**
 * Add the PURL value.
 *
 * @param $node
 *   The company node.
 *
 * @see og_purl_node_insert()
 */
function _garmentbox_company_set_purl($node) {
  ctools_include('cleanstring');
  $options = array(
    'lower case' => TRUE,
    'transliterate' => TRUE,
  );
  $node->purl['value'] = ctools_cleanstring($node->title, $options);
}

/**
 * Create OG-vocab for the "Size", with default terms.
 *
 * @param $node
 *   The company node.
 */
function _garmentbox_company_og_vocab_size($node) {
  $values = array(
    'name' => 'Size',
    'machine_name' => 'size_' . $node->nid,
    'description' => 'Specify the size names.',
  );
  $vocabulary = entity_create('taxonomy_vocabulary', $values);
  entity_save('taxonomy_vocabulary', $vocabulary);

  // Relate vocabulary to group.
  og_vocab_relation_save($vocabulary->vid, 'node', $node->nid);

  // Create Small, Medium, Large.
  foreach (array('Small', 'Medium', 'Large') as $delta => $name) {
    $values = array(
      'name' => $name,
      'weight' => $delta,
      'vocabulary' => $vocabulary->vid,
    );
    $term = entity_property_values_create_entity('taxonomy_term', $values)->save();
  }

  // Create OG-vocab entitys for each place the "field_size" should
  // appear.
  $info = array(
    'field_collection_item' => array(
      'field_quantity_info',
      'field_size_info',
    ),
  );

  $settings = array(
    'cardinality' => 1,
  );

  foreach ($info as $entity_type => $bundles) {
    foreach ($bundles as $bundle) {
      $og_vocab = og_vocab_create_og_vocab($vocabulary->vid, $entity_type, $bundle, 'field_size', $settings);
      $og_vocab->save();
    }
  }
}

/**
 * Implements hook_field_collection_item_presave().
 *
 * Add field collection item to group.
 */
function garmentbox_company_field_collection_item_insert($field_collection_item) {
  $entity = $field_collection_item->hostEntity();
  if (empty($entity->og_company[LANGUAGE_NONE][0]['target_id'])) {
    throw new Exception(format_string('Host entity of field collection @id does not belong to a company.', array('@id' => $field_collection_item->item_id)));
  }

  $gid = $entity->og_company[LANGUAGE_NONE][0]['target_id'];
  og_group('node', $gid, array('entity_type' => 'field_collection_item', 'entity' => $field_collection_item));
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function garmentbox_company_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
}
