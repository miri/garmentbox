<?php
/**
 * @file
 * Code for the Garmentbox Item feature.
 */

include_once 'garmentbox_item.features.inc';

/**
 * Implements hook_node_presave().
 *
 * Populate the Season reference field based on the selected entity.
 */
function garmentbox_item_node_presave($node) {
  if ($node->type != 'item_variant' && $node->type != 'item') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $nids = array_keys(garmentbox_general_get_node_hierarchy($node));
  $wrapper->field_reference_hierarchy->set($nids);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function garmentbox_item_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function garmentbox_item_field_formatter_info() {
  return array(
    'garmentbox_size_info' => array(
      'label' => t('Size information'),
      'field types' => array('field_collection'),
    ),
    'garmentbox_slideshow' => array(
      'label' => t('Garmentbox slideshow'),
      'field types' => array('image'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function garmentbox_item_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];

  switch ($display['type']) {
    case 'garmentbox_size_info':
      $sizes = array();
      foreach ($items as $item) {
        $wrapper = entity_metadata_wrapper('field_collection_item', $item['value']);
        $sizes[] = check_plain($wrapper->field_size->label());
      }
      $element[0] = array();
      $element[0]['#markup'] = theme('item_list', array('items' => $sizes));
      return $element;

    case 'garmentbox_slideshow':
      $options = array();
      foreach ($items as &$item) {
        $item = theme('image_style', array('style_name' => 'variant_preview', 'path' => $item['uri']));
      }

      $element[0] = array();
      $element[0]['#markup'] = theme('jcarousel', array('items' => $items, 'options' => $options));
      return $element;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hiding the fields: bill of materials & bill of labour.
 */
function garmentbox_item_form_item_variant_node_form_alter(&$form, $form_state) {
  $form['field_bol_info']['#access'] = FALSE;
  $form['field_bom_info']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function garmentbox_item_form_item_node_form_alter(&$form, $form_state) {
  $form['actions']['submit']['#value'] = t('Save and add an item variation');
  $form['actions']['submit']['#submit'][] = 'garmentbox_item_form_item_redirect_submit';
}

/**
 * Submit handler; Redirect from Item creation to Item-variant form.
 */
function garmentbox_item_form_item_redirect_submit($form, &$form_state) {
  $node = $form_state['node'];
  $options = array('query' => array('field_item' => $node->nid));
  $form_state['redirect'] = array('node/add/item-variant', $options);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove mass measurement units from the item variant BOM form.
 */
function garmentbox_item_form_field_collection_item_form_alter(&$form, $form_state) {
  if ($form['#bundle'] != 'field_bom_info') {
    return;
  }

  $mass_units = garmentbox_material_get_units('mass');
  foreach (array_keys($form['field_unit'][LANGUAGE_NONE]['#options']) as $tid) {
    if (in_array($tid, $mass_units)) {
      unset($form['field_unit'][LANGUAGE_NONE]['#options'][$tid]);
    }
  }
}

/**
 * Implements hook_init().
 *
 * Add a bubble selector for items without variants.
 */
function garmentbox_item_init() {
  $node = menu_get_object();
  if (!$node || $node->type != 'item') {
    return;
  }

  // Count the item's variants.
  $query = new EntityFieldQuery();
  $count = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'item_variant')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_item', 'target_id', $node->nid)
      ->count()
      ->execute();

  if (!$count) {
    garmentbox_bubble_bubble_manager('item_without_variants');
  }
}

/**
 * Fetch variant's main material.
 *
 * @param $node
 *   An item variant node.
 * @param $attributes
 *   Additional attributes for the link.
 *
 * @return
 *   Rendered icon of the item variant main material.
 */
function garmentbox_item_get_main_material_icon($node, $attributes = array()) {
  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->field_bom_info->value()) {
    return;
  }

  // Get the first BOM collection item.
  if (!$entity = $wrapper->field_bom_info->get(0)->field_material_item->value()) {
    return;
  }

  // Wrap the host entity of the first item.
  $wrapper = entity_metadata_wrapper('node', $entity->hostEntity());
  if (!$wrapper->value() || !$wrapper->field_images->value()) {
    return;
  }

  // Display the first material image.
  $image = $wrapper->field_images->get(0)->value();
  $image = theme('image_style', array('style_name' => 'material_thumbnail', 'path' => $image['uri']));

  $options = array(
    'html' => TRUE,
    'attributes' => $attributes + array(
      'title' => $wrapper->label(),
    ),
  );
  return l($image, 'node/' . $wrapper->getIdentifier(), $options);
}

/**
 * Calculate an item variant price.
 *
 * @param $node
 *   An item variant node.
 *
 * @return
 *   Raw variant item price.
 */
function garmentbox_item_get_variant_price($node) {
  return garmentbox_bom_get_variant_bom_price($node) + garmentbox_bol_get_variant_bol_price($node);
}

/**
 * Build a list of size terms available to an item variant.
 *
 * @param $node
 *   An item variant node.
 *
 * @return
 *   Array of term IDs.
 */
function garmentbox_item_get_available_sizes($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $sizes = array();
  foreach ($wrapper->field_size_info as $size_wrapper) {
    $sizes[$size_wrapper->field_size->getIdentifier()] = $size_wrapper->field_size->value();
  }
  return $sizes;
}
