<?php
/**
 * @file
 * Code for the Garmentbox General feature.
 */

include_once 'garmentbox_general.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function garmentbox_general_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_init().
 */
function garmentbox_general_init() {
  if (($node = menu_get_object()) && $nids = garmentbox_general_get_node_hierarchy($node)) {
    $breadcrumb[] = l(t('Home'), '<front>');
    foreach ($nids as $nid => $title) {
      $breadcrumb[] = l($title, 'node/' . $nid);
    }
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Move the garmentbox implementation to be the last one, so we can
 * control the theme, instead of System module.
 */
function garmentbox_general_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'custom_theme') {
    return;
  }
  unset($implementations['garmentbox_general']);
  $implementations['garmentbox_general'] = FALSE;
}

/**
 * Implements hook_custom_theme().
 */
function garmentbox_general_custom_theme() {
  $item = menu_get_item();
  return strpos($item['path'], 'admin') === 0 ? 'seven' : 'garmentbox_omega';
}

/**
 * Get the hierachy for a node.
 *
 * @todo: Move to general module.
 *
 * @param $node
 *   The node object to check the hierachy.
 *
 * @return
 *   Array keyed with node IDs and the node title as value, sorted by
 *   hierarchy. If no hierarchy found returns FALSE.
 */
function garmentbox_general_get_node_hierarchy($node, &$nids = array()) {

  if ($nids === FALSE) {
    // We reached a content type that has no hierarchy so break here.
    return;
  }
  if ($node->type == 'season') {
    // Node is top most, so return early.
    $nids[$node->nid] = $node->title;
    return $nids;
  }

  $field_name = FALSE;

  $wrapper = entity_metadata_wrapper('node', $node);
  switch ($node->type) {
    case 'item':
    case 'production_order':
      $field_name = 'field_season';
      break;

    case 'item_variant':
      $field_name = 'field_item';
      break;

    case 'task':
      $field_name = 'field_entity_reference';
      break;

    case 'pattern':
      $field_name = 'field_pattern_entity_reference';
      break;

    case 'pattern_task':
      $field_name = 'field_pattern';
      break;

    case 'material':
      return;
  }

  if (!$field_name) {
    $nids = FALSE;
    return;
  }

  $referenced_node = $wrapper->{$field_name}->value();
  $nids[$referenced_node->nid] = $referenced_node->title;
  garmentbox_general_get_node_hierarchy($referenced_node, $nids);

  return array_reverse($nids, TRUE);
}

/**
 * Render node as a mini panel.
 *
 * @param $node
 *   The node to pass to the mini panel.
 *
 *  @param $mini_name
 *    The mini panel name that his rendered html will replace the node rendered
 *    html.
 */
function garmentbox_general_render_node_as_mini_panel($node, $mini_name) {
  ctools_include('context');
  $mini = panels_mini_load($mini_name);
  $contexts = array();

  foreach ($mini->requiredcontexts as $key => $required_context) {
    $id = 'requiredcontext_' . $mini->requiredcontexts[$key]['name'] . '_' . $mini->requiredcontexts[$key]['id'];
    $contexts[$id] = ctools_context_create('node', $node);
  }

  $context = ctools_context_match_required_contexts($mini->requiredcontexts, $contexts);
  $mini->context = $mini->display->context = ctools_context_load_contexts($mini, FALSE, $context);
  return panels_render_display($mini->display);
}

/**
 * Implements hook_field_access().
 *
 * Hide the reference hierarchy field.
 */
function garmentbox_general_field_access($op, $field, $entity_type, $entity, $account) {
  if (!empty($field['field_name']) && $field['field_name'] == 'field_reference_hierarchy') {
    return FALSE;
  }
}

/**
 * Implements hook_entity_info_alter()
 */
function garmentbox_general_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['garmentbox_header'] = array(
    'label' => t('Garmentbox header'),
    'custom settings' => TRUE,
  );
}

/**
 * Create the breadcrumbs for a node.
 *
 * @see garmentbox_omega_preprocess_page().
 */
function garmentbox_general_get_node_breadcrumbs($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $links = array();
  $links[] = l(t('home'), '');

  if (!empty($wrapper->field_reference_hierarchy)) {
    $count = count($wrapper->field_reference_hierarchy->value());
    for ($delta = 0; $delta < $count; $delta++) {
      $node = $wrapper->field_reference_hierarchy->get($delta)->value();
      $links[] = l($node->title, 'node/' . $node->nid);
    }
  }

  $links[] = '<span>' . check_plain($wrapper->label()) . '</span>';
  $breadcrumbs = implode('<span>&gt;</span>', $links);
  return $breadcrumbs;
}

/**
 * Build the tabs for a node.
 *
 * @see garmentbox_omega_preprocess_page().
 */
function garmentbox_general_get_node_tabs($node) {
  switch ($node->type) {
    case 'season':
      return garmentbox_season_get_tabs($node);

    case 'item':
    case 'item_variant':
      return garmentbox_item_get_tabs($node);

    case 'material':
      return garmentbox_material_get_tabs($node);

    case 'production_order':
      return garmentbox_production_order_get_tabs($node);
  }
}

/**
 * Create the primary button (The pink link of the tabs row) of a node.
 *
 * @see garmentbox_omega_preprocess_page().
 */
function garmentbox_general_get_node_primary_button($node) {
  $item = menu_get_item();

  $button_data = array(
    'target_nid' => $node->nid,
    'add_destination' => TRUE,
  );

  switch ($item['path']) {
    case 'node/%':
      $button_data = _garmentbox_general_get_node_page_primary_button($node);
      if (!$button_data) {
        return;
      }
      break;

    case 'season/%/tasks':
      $button_data['field_name'] = 'field_entity_reference';
      $button_data['link_text'] = t('Add new task');
      $button_data['type'] = 'task';
      break;

    case 'season/%/orders':
      $button_data['field_name'] = 'field_season';
      $button_data['link_text'] = t('Add new order');
      $button_data['type'] = 'order';
      break;

    case 'season/%/production-orders':
      $button_data['field_name'] = 'field_season';
      $button_data['link_text'] = t('Add new production order');
      $button_data['type'] = 'production-order';
      break;

    case 'season/%/items':
      $button_data['field_name'] = 'field_season';
      $button_data['link_text'] = t('Add new item');
      $button_data['type'] = 'item';
      break;

    default:
      // No button defined.
      return;
  }

  $options = array('query' => array());
  if (!empty($button_data['field_name'])) {
    $options['query'] = array($button_data['field_name'] => $button_data['target_nid']);
  }
  if ($button_data['add_destination']) {
    $options['query'] = $options['query'] + drupal_get_destination();
  }

  return l($button_data['link_text'], "node/add/" . $button_data['type'], $options);
}

/**
 * Get the data for creating a primary button on a node page.
 *
 * @param $node
 *   A node.
 *
 * @return
 *   The button settings.
 */
function _garmentbox_general_get_node_page_primary_button($node) {
  $result = array(
    'field_name' => NULL,
    'type' => NULL,
    'link_text' => '',
    'add_destination' => TRUE,
    'target_nid' => NULL,
  );

  switch ($node->type) {
    case 'item_variant':
      $result['field_name'] = 'field_item';
      $result['link_text'] = t('Add new variation');
      $result['type'] = 'item-variant';
      // If the node is an item variant, load the related item.
      $wrapper = entity_metadata_wrapper('node', $node);
      $result['target_nid'] = $wrapper->field_item->getIdentifier();
      return $result;

    case 'item':
      $result['field_name'] = 'field_item';
      $result['link_text'] = t('Add new variation');
      $result['type'] = 'item-variant';
      // Don't add destination, as we will redirect user to create an
      // item-variant.
      $result['add_destination'] = FALSE;
      return $result;

    case 'material':
      $result['link_text'] = t('Add new material');
      $result['type'] = 'material';
      return $result;
  }
}
